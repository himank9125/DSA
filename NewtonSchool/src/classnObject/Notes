package char_doubt;

/*
Internal implementation of hashing :

 */

import jupyter_oops.A;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

class Info implements Comparable<Info> {
    char ch;
    int freq;
    String name;

    Info(char ch, int freq, String name) {
        this.ch = ch;
        this.freq = freq;
        this.name = name;
    }

    /*
    Sort on basis of freq.
    if freq of a character is less, it should come first.
    return negative value (-1)
    if freq of a character is more, it should come second.
    return positive value (1)
    if freq of both characters are equal, sort on basis of character

    sort on basis of character
    if character comes first in dictionary, it should appear first
    if character comes second in dictionary, it should appear second
    */
    @Override
    public int compareTo(Info info) {
        if (this.freq < info.freq) {
            return -1;
        } else if (this.freq > info.freq) {
            return 1;
        }
        if (this.ch < info.ch) {
            return -1;
        } else if (this.ch > info.ch) {
            return 1;
        }
        return 0;
    }
}

public class DoubtSession4 {

    /*
    char[] arr = {a, b, a, c, f, e, a, b, c}
    {1, 2, 3, 5, 3} -> {1, 2, 3, 3, 5}
    {{1, 2}, {3, 4}, {4, 1}} => sort this array on basis of second value
    {{4, 1}, {1, 2}, {3, 4}}

    a = 3, b = 2, c = 2, f = 1, e = 1
    List<Info> = {{a, 3}, {b, 2} {a, 3} {c, 2} {f, 1} {e, 1}, {a, 3}, {b, 2} {c, 2}}
    e f b b c c a a a
    Sort this array on the basis of frequency.
    If two characters have same frequency, the letter appearing first in the dictionary should be printed.

    Step 1: Find frequency of each element. (Hashmap/ Hashing).
     */
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int size = s.nextInt();

        char[] arr = new char[size];
        for (int i = 0; i < size; i++) {
            /*
            char -> a => "a".charAt(0)
             */
            arr[i] = s.next().charAt(0);
        }
        sortOnFrequency(arr);
    }

    /*
    insert in map : put(key, value)
    {a, b, a, c, f, e, a, b, c}
    {}
    {
       a: 3
       b: 2
       c: 2
       f: 1
       e: 1
    }
    Check whether a character is inside a map : containsKey(key)
    Find the value of a key : get(key)
     */
    public static void sortOnFrequency(char[] arr) {
        // Output : (e, 1, Mamta) (f, 1, Mamta).... b b c c a a a

        Map<Character, Integer> freqMap = new HashMap<>();
        for (char ch : arr) {
            if (freqMap.containsKey(ch)) {
                int prevFreq = freqMap.get(ch);
                prevFreq = prevFreq + 1;
                freqMap.put(ch, prevFreq);
            } else {
                freqMap.put(ch, 1);
            }
        }

        // Sort on the basis of frequency
        // List<Info> = {{a, 3}, {b, 2} {a, 3} {c, 2} {f, 1} {e, 1}, {a, 3}, {b, 2} {c, 2}}
        List<Info> list = new ArrayList<>();
        for (char ch : arr) {
            Info info = new Info(ch, freqMap.get(ch), "Mamta");
            list.add(info);
        }
        /*
        char[] arr = {a, b, a, c, f, e, a, b, c}
        new Info(a, 3, "Mamta")
        list :  {{a, 3, Mamta}, {b, 2} {a, 3} {c, 2} {f, 1} {e, 1}, {a, 3}, {b, 2} {c, 2}}
         */
        Collections.sort(list);

        for (Info info : list) {
            System.out.println(info.ch + " " + info.freq + " " + info.name);
        }
    }

}
